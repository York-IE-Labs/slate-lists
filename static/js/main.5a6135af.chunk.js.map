{"version":3,"sources":["plugins/Markdown.js","initial.js","App.js","index.js"],"names":["noBackspace","LIST_WRAPPER","SHORTCUTS","withMarkdown","editor","deleteBackward","insertText","text","selection","Range","isCollapsed","anchor","block","Editor","above","match","n","isBlock","path","range","focus","start","beforeText","string","type","Transforms","select","delete","setNodes","list","children","wrapNodes","setTimeout","move","unit","distance","reverse","includes","Point","equals","unwrapNodes","split","initialState","code","Leaf","attributes","leaf","Element","props","element","className","value","setValue","useMemo","withLists","withHistory","withReact","createEditor","onChange","console","log","autoFocus","onKeyDown","event","change","isHotkey","preventDefault","undentItem","indentItem","renderElement","renderLeaf","App","useState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a6135af.chunk.js","sourcesContent":["import { Editor, Transforms, Range, Point } from \"slate\";\n\nconst noBackspace = [\n  \"bulleted-list\",\n  \"numbered-list\",\n  \"list-item\",\n  \"paragraph\",\n];\n\nconst LIST_WRAPPER = {\n  \"*\": \"bulleted-list\",\n  \"-\": \"bulleted-list\",\n  \"+\": \"bulleted-list\",\n  \"1.\": \"numbered-list\",\n};\n\nconst SHORTCUTS = {\n  \"*\": \"list-item\",\n  \"-\": \"list-item\",\n  \"+\": \"list-item\",\n  \"1.\": \"list-item\",\n  \"#\": \"heading-two\",\n  \"##\": \"heading-three\",\n  \"###\": \"heading-four\",\n};\n\n// withLists handles behavior regarding ol and ul lists\n// more specifically, withLists properly exits the list with `enter` or `backspace`\n// from an empty list item, transforming the node to a paragraph\nconst withMarkdown = (editor) => {\n  const { deleteBackward, insertText } = editor;\n\n  editor.insertText = (text) => {\n    const { selection } = editor;\n\n    if (text === \" \" && selection && Range.isCollapsed(selection)) {\n      const { anchor } = selection;\n      const block = Editor.above(editor, {\n        match: (n) => Editor.isBlock(editor, n),\n      });\n      const path = block ? block[1] : [];\n      const start = Editor.start(editor, path);\n      const range = { anchor, focus: start };\n      const beforeText = Editor.string(editor, range);\n      const type = SHORTCUTS[beforeText];\n\n      if (type) {\n        Transforms.select(editor, range);\n        Transforms.delete(editor);\n        Transforms.setNodes(\n          editor,\n          { type },\n          { match: (n) => Editor.isBlock(editor, n) }\n        );\n\n        if (type === \"list-item\") {\n          const list = { type: LIST_WRAPPER[beforeText], children: [] };\n          Transforms.wrapNodes(editor, list, {\n            match: (n) => n.type === \"list-item\",\n          });\n        }\n\n        if (type === \"check-list-item\") {\n          setTimeout(\n            () => Transforms.move(editor, { unit: \"word\", distance: 1 }),\n            0\n          );\n          setTimeout(\n            () =>\n              Transforms.move(editor, {\n                unit: \"word\",\n                distance: 1,\n                reverse: true,\n              }),\n            0\n          );\n        }\n\n        return;\n      }\n    }\n\n    insertText(text);\n  };\n\n  // reset formatting to paragraph, on backspace, when there is no content\n  editor.deleteBackward = (...args) => {\n    const { selection } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const match = Editor.above(editor, {\n        match: (n) => Editor.isBlock(editor, n),\n      });\n\n      if (match) {\n        const [block, path] = match;\n        const start = Editor.start(editor, path);\n\n        if (\n          !noBackspace.includes(block.type) &&\n          Point.equals(selection.anchor, start)\n        ) {\n          Transforms.setNodes(editor, { type: \"paragraph\" });\n\n          if (block.type === \"list-item\") {\n            Transforms.unwrapNodes(editor, {\n              match: (n) =>\n                n.type === \"bulleted-list\" || n.type === \"numbered-list\",\n              split: true,\n            });\n          }\n\n          return;\n        }\n      }\n\n      deleteBackward(...args);\n    }\n  };\n\n  return editor;\n};\n\nexport default withMarkdown;\n","const initialState = [\n  {\n    type: \"heading-one\",\n    children: [\n      {\n        text: \"Hello There\",\n      },\n    ],\n  },\n  {\n    children: [\n      {\n        text: \"This example uses markdown syntax to format text.\",\n      },\n    ],\n  },\n  {\n    type: \"bulleted-list\",\n    children: [\n      {\n        type: \"list-item\",\n        children: [\n          {\n            code: true,\n            text: \"*\",\n          },\n          {\n            text: \", \",\n          },\n          {\n            code: true,\n            text: \"-\",\n          },\n          {\n            text: \", \",\n          },\n          {\n            code: true,\n            text: \"+\",\n          },\n          {\n            text: \", \",\n          },\n          {\n            code: true,\n            text: \"1.\",\n          },\n          {\n            text: \" to create a list\",\n          },\n        ],\n      },\n      {\n        type: \"list-item\",\n        children: [\n          {\n            code: true,\n            text: \"#\",\n          },\n          {\n            text: \", \",\n          },\n          {\n            code: true,\n            text: \"##\",\n          },\n          {\n            text: \", \",\n          },\n          {\n            code: true,\n            text: \"###\",\n          },\n          {\n            text: \", \",\n          },\n          {\n            text: \"to create headers\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    children: [\n      {\n        text: \"Demo \",\n      },\n      {\n        code: true,\n        text: \"ol\",\n      },\n      {\n        text: \" and \",\n      },\n      {\n        code: true,\n        text: \"ul\",\n      },\n      {\n        text: \" list behavior here... \",\n      },\n    ],\n  },\n];\n\nexport default initialState;\n","import React, { useState, useMemo } from \"react\";\nimport { createEditor } from \"slate\";\nimport { Slate, Editable, withReact } from \"slate-react\";\nimport { withHistory } from \"slate-history\";\nimport isHotkey from \"is-hotkey\";\n\nimport withMarkdown from \"./plugins/Markdown\";\nimport { withLists, indentItem, undentItem } from \"@york-ie-labs/slate-lists\";\nimport initialState from \"./initial\";\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  if (leaf.code) {\n    children = <pre {...attributes}>{children}</pre>;\n  }\n  return <span {...attributes}>{children}</span>;\n};\n\nconst Element = (props) => {\n  const { attributes, children, element } = props;\n\n  // standard components\n  switch (element.type) {\n    case \"bulleted-list\":\n      return <ul {...attributes}>{children}</ul>;\n    case \"numbered-list\":\n      return (\n        <ol {...attributes} className=\"editor-ol\">\n          {children}\n        </ol>\n      );\n    case \"list-item\":\n      return <li {...attributes}>{children}</li>;\n    case \"heading-one\":\n      return <h1 {...attributes}>{children}</h1>;\n    case \"heading-two\":\n      return <h2 {...attributes}>{children}</h2>;\n    case \"heading-three\":\n      return <h3 {...attributes}>{children}</h3>;\n    default:\n      return <p {...attributes}>{children}</p>;\n  }\n};\n\nconst Editor = ({ value, setValue }) => {\n  const editor = useMemo(\n    () => withLists(withMarkdown(withHistory(withReact(createEditor())))),\n    []\n  );\n\n  const onKeyDown = (event, change) => {\n    if (isHotkey(\"shift+tab\", event)) {\n      // attempt to un-indent on shift+tab within list\n      event.preventDefault();\n      undentItem(editor);\n    } else if (isHotkey(\"tab\", event)) {\n      // attempt to indent on tab within list\n      event.preventDefault();\n      indentItem(editor);\n    }\n  };\n\n  const update = (value) => {\n    console.log(value);\n    setValue(value);\n  };\n\n  return (\n    <Slate editor={editor} value={value} onChange={update}>\n      <Editable\n        autoFocus={true}\n        onKeyDown={onKeyDown}\n        renderElement={(props) => <Element {...props} />}\n        renderLeaf={(props) => <Leaf {...props} />}\n      />\n    </Slate>\n  );\n};\n\nconst App = () => {\n  // Add the initial value when setting up our state.\n  const [value, setValue] = useState(initialState);\n\n  return (\n    <>\n      <div className=\"accent\"></div>\n      <div className=\"editor\">\n        <Editor value={value} setValue={setValue} />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}